# ----- Main function -----
__main__.main

    # ----- Create `application` -----
    web.application.application.__init__

        # ----- Initialize URL-to-handler mapping -----
        web.application.application.init_mapping

        # ----- Create load processor -----
        web.application.loadhook

        # ----- Add load processor -----
        web.application.application.add_processor

        # ----- Create unload processor -----
        web.application.unloadhook

        # ----- Add unload processor -----
        web.application.application.add_processor

    # ----- Create WSGI application -----
    web.application.application.wsgifunc

    # ----- Call `make_server` -----
    wsgiref.simple_server.make_server

        # ----- Create `TCPServer` -----
        wsgiref.simple_server.WSGIServer -> SocketServer.TCPServer.__init__

            # ----- Call super method -----
            wsgiref.simple_server.WSGIServer -> SocketServer.BaseServer.__init__

            # ----- Create socket -----
            socket._socketobject.__init__

            # ----- Call `server_bind` -----
            wsgiref.simple_server.WSGIServer.server_bind

                # ----- Call super method -----
                wsgiref.simple_server.WSGIServer -> BaseHTTPServer.HTTPServer.server_bind

                    # ----- Call super method -----
                    wsgiref.simple_server.WSGIServer -> SocketServer.TCPServer.server_bind

                        # ----- Bind socket to server address -----
                        socket._socketobject.bind

                # ----- Call `setup_environ` -----
                wsgiref.simple_server.WSGIServer.setup_environ

            # ----- Call `server_activate` -----
            wsgiref.simple_server.WSGIServer -> SocketServer.TCPServer.server_activate

                # ----- Start listening socket -----
                socket._socketobject.listen

        # ----- Call `set_app` -----
        wsgiref.simple_server.WSGIServer.set_app

    # ----- Call `serve_forever` -----
    wsgiref.simple_server.WSGIServer -> SocketServer.BaseServer.serve_forever

        # ----- Loop to poll listening socket's read event -----
        ```
        # Pseudo code
        while True:
            ready = select(timeout)
            if ready:
                return self._handle_request_noblock()
        ```

            # ----- Poll listening socket's read event -----
            # Only the listening socket is polled so when there is a read event
            # it must be from the listening socket.
            #
            select.select

            # ----- Call `_handle_request_noblock` -----
            # When read event occurs, it means a client is connecting.
            #
            wsgiref.simple_server.WSGIServer -> SocketServer.BaseServer._handle_request_noblock

                # ----- Call `get_request` -----
                wsgiref.simple_server.WSGIServer -> SocketServer.TCPServer.get_request

                    # ----- Accept the connecting socket -----
                    socket._socketobject.accept

                        # ----- Wrap the accepted socket's file descriptor in a socket object -----
                        socket._socketobject.__init__

                # ----- Call `verify_request` -----
                wsgiref.simple_server.WSGIServer -> SocketServer.BaseServer.verify_request

                # ----- Call `process_request` -----
                wsgiref.simple_server.WSGIServer -> SocketServer.BaseServer.process_request

                    # ----- Call `finish_request` -----
                    wsgiref.simple_server.WSGIServer -> SocketServer.BaseServer.finish_request

                        # ----- Create `self.RequestHandlerClass` instance -----
                        wsgiref.simple_server.WSGIRequestHandler -> SocketServer.BaseRequestHandler.__init__

                            # ----- Call `setup` -----
                            wsgiref.simple_server.WSGIRequestHandler -> SocketServer.StreamRequestHandler.setup

                                # ----- Create input file from the socket -----
                                socket._socketobject.makefile

                                    # ----- Wrap the socket in `_fileobject` -----
                                    socket._fileobject.__init__

                                # ----- Create output file from the socket -----
                                socket._socketobject.makefile

                                    # ----- Wrap the socket in `_fileobject` -----
                                    socket._fileobject.__init__

                            # ----- Call `handle` -----
                            wsgiref.simple_server.WSGIRequestHandler.handle

                                # ----- Read request line -----
                                socket._fileobject.readline

                                # ----- Call `parse_request` to parse headers -----
                                wsgiref.simple_server.WSGIRequestHandler -> BaseHTTPServer.BaseHTTPRequestHandler.parse_request

                                # ----- Get the stderr file to be passed to WSGI server handler -----
                                wsgiref.simple_server.WSGIRequestHandler.get_stderr

                                # ----- Get the environ dict to be passed to WSGI server handler -----
                                wsgiref.simple_server.WSGIRequestHandler.get_environ

                                # ----- Create WSGI server handler -----
                                wsgiref.simple_server.ServerHandler -> wsgiref.handlers.SimpleHandler.__init__

                                # ----- Get WSGI application  -----
                                wsgiref.simple_server.WSGIServer.get_app

                                # ----- Call `run` -----
                                wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.run

                                    # ----- Call `setup_environ` -----
                                    wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.setup_environ

                                    # ----- Call WSGI application -----
                                    # Web.py's WSGI application is an inner function
                                    # created in `web.application.application.wsgifunc`.
                                    # Not visible in log.

                                        # ----- Call `_cleanup` -----
                                        web.application.application._cleanup

                                        # ----- Initialize `web.ctx` -----
                                        web.application.application.load

                                        # ----- Call `handle_with_processors` -----
                                        web.application.application.handle_with_processors

                                            # ----- Call `_load` processor -----
                                            web.application.application._load

                                            # ----- Map URL to request handler -----
                                            web.application.application._match

                                            # ----- Call `handle` -----
                                            web.application.application.handle

                                                # ----- Call `_delegate` -----
                                                web.application.application._delegate

                                                    # ----- Create request handler -----
                                                    __main__.CustomRequestHandler -> __builtin__.object.__init__

                                                    # ----- Call `POST` ----
                                                    __main__.CustomRequestHandler.POST

                                                        # ----- Read request body -----
                                                        socket._fileobject.read

                                                        # ----- Return response body -----

                                            # ----- Call `_unload` processor -----
                                            web.application.application._unload

                                        # ----- Set response status line and headers -----
                                        wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.start_response

                                        # ----- Create generator function `cleanup` -----
                                        # Generator created by this function will be
                                        # chained as the last sub iterator of the result
                                        # iterator returned to the WSGI application's
                                        # caller.
                                        #
                                        # The intension is to call `self._cleanup` after
                                        # the response body is produced, in case the
                                        # iterator producing response body uses `web.ctx`.
                                        # This is why `self._cleanup` can not be called
                                        # right after a request handler returns.
                                        #
                                        # The cleanup generator will yield an empty string
                                        # so it will not change the response body.
                                        """
                                        def cleanup():
                                            self._cleanup()
                                            yield '' # force this function to be a generator
                                        """

                                        # ----- Return response body iterator -----
                                        """
                                        return itertools.chain(result, cleanup())
                                        """

                                # ----- Call `finish_response` -----
                                wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.finish_response

                                    # ----- Call `write` -----
                                    wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.write

                                        # ----- Call `send_headers` -----
                                        wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.send_headers

                                            # ----- Call `cleanup_headers` -----
                                            wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.cleanup_headers

                                            # ----- Call `send_preamble` -----
                                            wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.send_preamble

                                                # ----- Write status line -----
                                                wsgiref.simple_server.ServerHandler -> wsgiref.handlers.SimpleHandler._write

                                                # ----- Write `Date` header -----
                                                socket._fileobject.write

                                                # ----- Write `Server` header -----
                                                socket._fileobject.write

                                            # ----- Write `Content-Length` header -----
                                            socket._fileobject.write

                                        # ----- Write response body -----
                                        socket._fileobject.write

                                        # ----- Call `_flush` -----
                                        wsgiref.simple_server.ServerHandler -> wsgiref.handlers.SimpleHandler._flush

                                            # ----- Flush output `_fileobject` -----
                                            socket._fileobject.flush

                                    # ----- Call `_cleanup` -----
                                    web.application.application._cleanup

                                    # ----- Write empty string yielded from the cleanup generator -----
                                    wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.write

                                    # ----- Call `finish_content` -----
                                    wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.finish_content

                                    # ----- Call `close` -----
                                    wsgiref.simple_server.ServerHandler.close

                                        # ----- Call super method -----
                                        wsgiref.simple_server.ServerHandler -> wsgiref.handlers.BaseHandler.close

                            # ----- Call `finish` -----
                            wsgiref.simple_server.WSGIRequestHandler -> SocketServer.StreamRequestHandler.finish

                                # ----- Flush stdout `_fileobject` -----
                                socket._fileobject.flush

                                # ----- Close stdout `_fileobject` -----
                                socket._fileobject.close

                                # ----- Close stderr `_fileobject` -----
                                socket._fileobject.close

                    # ----- Call `shutdown_request` -----
                    wsgiref.simple_server.WSGIServer -> SocketServer.TCPServer.shutdown_request

                        # ----- Close write channel -----
                        socket._socketobject.shutdown

                        # ----- Call `close_request` -----
                        wsgiref.simple_server.WSGIServer -> SocketServer.TCPServer.close_request

                            # ----- Close socket -----
                            socket._socketobject.close
